package visitorPlay.Util;

import visitorPlay.Util.Visitor;
import visitorPlay.Util.FileProcessor;
import visitorPlay.Util.Results;
import visitorPlay.Util.SpellCheckResults;
import visitorPlay.Util.Element;
import visitorPlay.Util.MyElement;
import java.io.FileNotFoundException;
import java.nio.file.InvalidPathException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Adrian Jimenez
 *
 * SpellCheckAnalyzer is a utility class that acts as a
 * visitor in the visitor pattern. It spell checks each
 * word in the input file to determine whether a letter
 * in a misspelled word can be swapped to create an
 * acceptable word
 */

public class SpellCheckAnalyzer implements Visitor{

	/**
	 * The file processor that will read the acceptable words
	 * file
	 */
	private FileProcessor fileProcessor = null;

	/**
	 * The results object that will store and persist the results
	 */
	private Results spellCheckResults;

	/**
	 * Constructs a SpellCheckAnalyzer object
	 * @param acceptableWordsFilename The path of the acceptable words
	 * file
	 * @param spellCheckResultsIn The Results object that will be
	 * storing and persisting information generated by this class
	 */
	public SpellCheckAnalyzer(String acceptableWordsFilename, Results spellCheckResultsIn){
		try{
			fileProcessor = new FileProcessor(acceptableWordsFilename);
		}catch(InvalidPathException | SecurityException | IOException e){
			e.printStackTrace();
		}
		spellCheckResults = spellCheckResultsIn;
	}

	/**
	 * Reads through the acceptable words file and stores each word
	 * in spellCheckResults
	 */
	public void storeAcceptableWords(){
		String line = null;
		SpellCheckResults results = (SpellCheckResults) spellCheckResults;
		try{
			line = fileProcessor.poll();
		}catch(IOException e){
			e.printStackTrace();
		}
		while(line!=null){
			results.storeAcceptableWords(line.toLowerCase());
			try{
				line = fileProcessor.poll();
			}catch(IOException e){
				e.printStackTrace();
			}
		}
	}

	/**
	 * Visits an element and checks whether one letter can be replaced
	 * to form an acceptable word
	 * @param element The element to be visited
	 */
	public void visit(Element element){
		storeAcceptableWords();
		int numCharsEqual = 0;
		SpellCheckResults results = (SpellCheckResults) spellCheckResults;
		MyElement myElement = (MyElement) element;
		String[] words = myElement.getSentence().split(" ");
		for(String word : words){
			word = word.toLowerCase();
			if(word.endsWith(".")){
				word = word.substring(0, word.length()-1);
			}
			numCharsEqual = 0;
			for(String acceptableWord : results.getAcceptableWords()){
				if(acceptableWord.length() == word.length()){
					for(int i=0; i < word.length(); i++){
						if(word.charAt(i) == acceptableWord.charAt(i)){
							numCharsEqual++;
						}
					}
					if(numCharsEqual == (word.length() - 1)){
						results.storeMisspelledWord(word,acceptableWord);
					}
				}
			}
		}
	}

	/**
	 * Returns the hashcode of this object
	 */
	@Override
	public int hashCode(){
		return 4;
	}

	/**
	 * Returns a string representation of this object
	 */
	@Override
	public String toString(){
		return "SpellCheckAnalyzer";
	}

}
